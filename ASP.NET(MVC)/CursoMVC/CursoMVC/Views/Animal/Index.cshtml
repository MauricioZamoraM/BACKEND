@model List<SelectListItem>
@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <div class="form-group">
            Clase
            @*Esta línea genera una lista desplegable en la vista.*@
            @*"AnimalClass": Es el nombre del campo o propiedad en el modelo que se utilizará para establecer el valor seleccionado en la lista desplegable.*@
            @*Model: Es el modelo que se utiliza para generar las opciones de la lista desplegable. En este caso, se asume que el modelo proporciona los datos necesarios para generar las opciones.*@
            @*new { @class = "form-control", id="AnimalClass" }: Es un objeto anónimo que se utiliza para especificar los atributos HTML adicionales que se aplicarán a la lista desplegable. En este caso, se establece la clase CSS como "form-control" y el atributo id como "AnimalClass".*@
            @Html.DropDownList("AnimalClass", Model, new { @class = "form-control", id = "AnimalClass" })
        </div>

        <div class="form-group">
            Animal
            <select id="animal" name="animal" class="form-control"></select>
        </div>
    </div>
</div>


<script>
    //Se obtiene el elemento desplegable "AnimalClass" y se le agrega un evento de tipo "change" que llama a la función Refresh. Luego, se llama a la función Refresh para actualizar los elementos desplegables al cargar la página
    var cboAnimalClass = document.getElementById("AnimalClass");
    cboAnimalClass.addEventListener("change", Refresh);
    Refresh();
    //Esta función realiza una solicitud Fetch al controlador Animal del servidor, pasando el valor del elemento desplegable "AnimalClass" como parámetro IdAnimalClass. Luego, se procesa la respuesta y se actualiza el elemento desplegable "animal" con los datos recibidos
    function Refresh() {
        fetch("@Url.Content("~/Animal/Animal")" + "?IdAnimalClass=" + cboAnimalClass.value)//Además, se pasa un parámetro llamado "IdAnimalClass" que se concatena con el valor de cboAnimalClass.value, que se asume es el valor seleccionado de un elemento HTML de lista desplegable (dropdown list).
            .then(function (result) {
                if (result.ok) {
                    return result.json();
                }
            })
            .then(function (data) {
                console.log(data);
                cbo = document.getElementById("animal");//Se obtiene una referencia al elemento HTML de lista desplegable (dropdown list) con el atributo id igual a "animal". Presumiblemente, este elemento es el destino donde se agregarán las nuevas opciones.
                cbo.innerHTML = "";//Se vacía el contenido actual del elemento de lista desplegable. Esto se hace asignando una cadena vacía a la propiedad innerHTML, lo que elimina todas las opciones previas.
                data.forEach(function (element) {
                    let opt = document.createElement("option");//Se crea un nuevo elemento HTML <option> utilizando document.createElement(). Este elemento representa una opción en la lista desplegable.
                    opt.appendChild(document.createTextNode(element.Text));//opt.appendChild(document.createTextNode(element.Text));: Se crea un nodo de texto con el contenido de element.Text y se agrega como hijo del elemento <option>. Esto establece el texto visible de la opción en la lista desplegable.
                    opt.value = element.Value;// Se asigna el valor de element.Value al atributo value del elemento <option>. Esto establece el valor asociado a la opción seleccionada.

                    cbo.appendChild(opt);// Se agrega el elemento <option> creado al elemento de lista desplegable, utilizando appendChild(). Esto inserta la nueva opción al final de la lista.
                })
            })
    }
</script>